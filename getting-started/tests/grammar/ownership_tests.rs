//所有权测试
//Rust 所有权负责：跟踪哪部分代码正在使用堆上的哪些数据，最大限度的减少堆上的重复数据的数量，以及清理堆上不再使用的数据确保不会耗尽空间。
//所有权规则：
// 1. Rust 中的每一个值都有一个 所有者（owner）。
// 2. 值在任一时刻有且只有一个所有者。
// 3. 当所有者（变量）离开作用域，这个值将被丢弃。
//Rust 内存管理策略：
// 内存在拥有它的变量离开作用域后就被自动释放。

#[test]
fn test_move() {
    let s1 = String::from("hello");
    // let s2 = s1;                 //移动操作：将“hello”字符串的引用传递给s2的同时，将s1给释放掉了
    // println!("{s1}, world!");    //再次访问s1由于已经被释放了会报错
    //如果想让s1仍然可用应该使用克隆操作
    let s2 = s1.clone();     //s1 和 s2 指向两块不同的内存
    println!("{s1}, world!");
    println!("{s2}, world!");

    let x = 5;
    let y = x;                 //像这种基本数据类型，赋值操作本质是值拷贝
    println!("x = {x}, y = {y}");
}

//TODO Copy trait & Drop trait
